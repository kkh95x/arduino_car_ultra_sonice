
car_with_ultra_sonice.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000530  000005a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000530  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000005a6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005d8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000618  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009f9  00000000  00000000  00000650  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000072f  00000000  00000000  00001049  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000485  00000000  00000000  00001778  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  00001c00  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000492  00000000  00000000  00001c54  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002cb  00000000  00000000  000020e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  000023b1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e3       	ldi	r30, 0x30	; 48
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 c7 00 	call	0x18e	; 0x18e <main>
  8e:	0c 94 96 02 	jmp	0x52c	; 0x52c <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <_Z4initv>:
	
}

void setMotorSpeed(uint8_t speed) {
    OCR1A = speed;
    OCR1B = speed;
  96:	8f ef       	ldi	r24, 0xFF	; 255
  98:	84 b9       	out	0x04, r24	; 4
  9a:	85 b9       	out	0x05, r24	; 5
  9c:	8a b1       	in	r24, 0x0a	; 10
  9e:	8f 60       	ori	r24, 0x0F	; 15
  a0:	8a b9       	out	0x0a, r24	; 10
  a2:	8a b1       	in	r24, 0x0a	; 10
  a4:	80 61       	ori	r24, 0x10	; 16
  a6:	8a b9       	out	0x0a, r24	; 10
  a8:	8a b1       	in	r24, 0x0a	; 10
  aa:	8f 7d       	andi	r24, 0xDF	; 223
  ac:	8a b9       	out	0x0a, r24	; 10
  ae:	81 ea       	ldi	r24, 0xA1	; 161
  b0:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
  b4:	8a e0       	ldi	r24, 0x0A	; 10
  b6:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
  ba:	8b b1       	in	r24, 0x0b	; 11
  bc:	8f 77       	andi	r24, 0x7F	; 127
  be:	8b b9       	out	0x0b, r24	; 11
  c0:	8b b1       	in	r24, 0x0b	; 11
  c2:	8e 7f       	andi	r24, 0xFE	; 254
  c4:	8b b9       	out	0x0b, r24	; 11
  c6:	8b b1       	in	r24, 0x0b	; 11
  c8:	82 60       	ori	r24, 0x02	; 2
  ca:	8b b9       	out	0x0b, r24	; 11
  cc:	8b b1       	in	r24, 0x0b	; 11
  ce:	8b 7f       	andi	r24, 0xFB	; 251
  d0:	8b b9       	out	0x0b, r24	; 11
  d2:	8b b1       	in	r24, 0x0b	; 11
  d4:	88 60       	ori	r24, 0x08	; 8
  d6:	8b b9       	out	0x0b, r24	; 11
  d8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
  e2:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
  e6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
  f0:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
  f4:	08 95       	ret

000000f6 <_Z15measureDistancev>:
}

int measureDistance() {
    PORTD |= (1 << PORTD4);  // Set trigger pin high
  f6:	8b b1       	in	r24, 0x0b	; 11
  f8:	80 61       	ori	r24, 0x10	; 16
  fa:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  fc:	25 e3       	ldi	r18, 0x35	; 53
  fe:	2a 95       	dec	r18
 100:	f1 f7       	brne	.-4      	; 0xfe <_Z15measureDistancev+0x8>
 102:	00 00       	nop
    _delay_us(10);           // Wait for 10 microseconds
    PORTD &= ~(1 << PORTD4); // Set trigger pin low
 104:	8b b1       	in	r24, 0x0b	; 11
 106:	8f 7e       	andi	r24, 0xEF	; 239
 108:	8b b9       	out	0x0b, r24	; 11

    uint16_t timeout = 60000;
 10a:	80 e6       	ldi	r24, 0x60	; 96
 10c:	9a ee       	ldi	r25, 0xEA	; 234
    while (!(PIND & (1 << PORTD5)) && timeout > 0) {
 10e:	4d 99       	sbic	0x09, 5	; 9
 110:	04 c0       	rjmp	.+8      	; 0x11a <_Z15measureDistancev+0x24>
 112:	00 97       	sbiw	r24, 0x00	; 0
 114:	21 f4       	brne	.+8      	; 0x11e <_Z15measureDistancev+0x28>
 116:	20 e0       	ldi	r18, 0x00	; 0
 118:	03 c0       	rjmp	.+6      	; 0x120 <_Z15measureDistancev+0x2a>
 11a:	20 e0       	ldi	r18, 0x00	; 0
 11c:	01 c0       	rjmp	.+2      	; 0x120 <_Z15measureDistancev+0x2a>
 11e:	21 e0       	ldi	r18, 0x01	; 1
 120:	22 23       	and	r18, r18
 122:	31 f0       	breq	.+12     	; 0x130 <_Z15measureDistancev+0x3a>
 124:	35 e0       	ldi	r19, 0x05	; 5
 126:	3a 95       	dec	r19
 128:	f1 f7       	brne	.-4      	; 0x126 <_Z15measureDistancev+0x30>
 12a:	00 00       	nop
        _delay_us(1);
        timeout--;
 12c:	01 97       	sbiw	r24, 0x01	; 1
    PORTD |= (1 << PORTD4);  // Set trigger pin high
    _delay_us(10);           // Wait for 10 microseconds
    PORTD &= ~(1 << PORTD4); // Set trigger pin low

    uint16_t timeout = 60000;
    while (!(PIND & (1 << PORTD5)) && timeout > 0) {
 12e:	ef cf       	rjmp	.-34     	; 0x10e <_Z15measureDistancev+0x18>
        _delay_us(1);
        timeout--;
    }
    if (timeout == 0) {
 130:	89 2b       	or	r24, r25
 132:	39 f1       	breq	.+78     	; 0x182 <_Z15measureDistancev+0x8c>
 134:	60 e0       	ldi	r22, 0x00	; 0
 136:	70 e0       	ldi	r23, 0x00	; 0
 138:	80 e6       	ldi	r24, 0x60	; 96
 13a:	9a ee       	ldi	r25, 0xEA	; 234
        return 9999;
    }

    uint16_t startTime = 0;
    timeout = 60000;
    while (PIND & (1 << PORTD5) && timeout > 0) {
 13c:	4d 9b       	sbis	0x09, 5	; 9
 13e:	04 c0       	rjmp	.+8      	; 0x148 <_Z15measureDistancev+0x52>
 140:	00 97       	sbiw	r24, 0x00	; 0
 142:	21 f4       	brne	.+8      	; 0x14c <_Z15measureDistancev+0x56>
 144:	32 2f       	mov	r19, r18
 146:	03 c0       	rjmp	.+6      	; 0x14e <_Z15measureDistancev+0x58>
 148:	32 2f       	mov	r19, r18
 14a:	01 c0       	rjmp	.+2      	; 0x14e <_Z15measureDistancev+0x58>
 14c:	31 e0       	ldi	r19, 0x01	; 1
 14e:	33 23       	and	r19, r19
 150:	41 f0       	breq	.+16     	; 0x162 <_Z15measureDistancev+0x6c>
 152:	35 e0       	ldi	r19, 0x05	; 5
 154:	3a 95       	dec	r19
 156:	f1 f7       	brne	.-4      	; 0x154 <_Z15measureDistancev+0x5e>
 158:	00 00       	nop
        _delay_us(1);
        startTime++;
 15a:	6f 5f       	subi	r22, 0xFF	; 255
 15c:	7f 4f       	sbci	r23, 0xFF	; 255
        timeout--;
 15e:	01 97       	sbiw	r24, 0x01	; 1
        return 9999;
    }

    uint16_t startTime = 0;
    timeout = 60000;
    while (PIND & (1 << PORTD5) && timeout > 0) {
 160:	ed cf       	rjmp	.-38     	; 0x13c <_Z15measureDistancev+0x46>
        _delay_us(1);
        startTime++;
        timeout--;
    }
    if (timeout == 0) {
 162:	89 2b       	or	r24, r25
 164:	89 f0       	breq	.+34     	; 0x188 <_Z15measureDistancev+0x92>
        return 9999;
    }

    return startTime * 0.01715;
 166:	80 e0       	ldi	r24, 0x00	; 0
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	0e 94 9b 01 	call	0x336	; 0x336 <__floatunsisf>
 16e:	28 e2       	ldi	r18, 0x28	; 40
 170:	3e e7       	ldi	r19, 0x7E	; 126
 172:	4c e8       	ldi	r20, 0x8C	; 140
 174:	5c e3       	ldi	r21, 0x3C	; 60
 176:	0e 94 01 02 	call	0x402	; 0x402 <__mulsf3>
 17a:	0e 94 65 01 	call	0x2ca	; 0x2ca <__fixsfsi>
 17e:	cb 01       	movw	r24, r22
 180:	08 95       	ret
    while (!(PIND & (1 << PORTD5)) && timeout > 0) {
        _delay_us(1);
        timeout--;
    }
    if (timeout == 0) {
        return 9999;
 182:	8f e0       	ldi	r24, 0x0F	; 15
 184:	97 e2       	ldi	r25, 0x27	; 39
 186:	08 95       	ret
        _delay_us(1);
        startTime++;
        timeout--;
    }
    if (timeout == 0) {
        return 9999;
 188:	8f e0       	ldi	r24, 0x0F	; 15
 18a:	97 e2       	ldi	r25, 0x27	; 39
    }

    return startTime * 0.01715;
}
 18c:	08 95       	ret

0000018e <main>:

int main() {
    init();
 18e:	0e 94 4b 00 	call	0x96	; 0x96 <_Z4initv>
	  
				  
    while (1) {
		 // Move forward
		
        int distance = measureDistance();
 192:	0e 94 7b 00 	call	0xf6	; 0xf6 <_Z15measureDistancev>
 
        if (distance < 10) {
 196:	0a 97       	sbiw	r24, 0x0a	; 10
 198:	0c f0       	brlt	.+2      	; 0x19c <main+0xe>
 19a:	87 c0       	rjmp	.+270    	; 0x2aa <main+0x11c>
            // Stop the car
		   PORTD|=(1<<PORTD7);
 19c:	8b b1       	in	r24, 0x0b	; 11
 19e:	80 68       	ori	r24, 0x80	; 128
 1a0:	8b b9       	out	0x0b, r24	; 11
           PORTD &= ~(1 << PORTD0);
 1a2:	8b b1       	in	r24, 0x0b	; 11
 1a4:	8e 7f       	andi	r24, 0xFE	; 254
 1a6:	8b b9       	out	0x0b, r24	; 11
           PORTD &= ~(1 << PORTD1);
 1a8:	8b b1       	in	r24, 0x0b	; 11
 1aa:	8d 7f       	andi	r24, 0xFD	; 253
 1ac:	8b b9       	out	0x0b, r24	; 11
           PORTD &= ~(1 << PORTD2);
 1ae:	8b b1       	in	r24, 0x0b	; 11
 1b0:	8b 7f       	andi	r24, 0xFB	; 251
 1b2:	8b b9       	out	0x0b, r24	; 11
           PORTD &= ~(1 << PORTD3);
 1b4:	8b b1       	in	r24, 0x0b	; 11
 1b6:	87 7f       	andi	r24, 0xF7	; 247
 1b8:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ba:	2f ef       	ldi	r18, 0xFF	; 255
 1bc:	83 ed       	ldi	r24, 0xD3	; 211
 1be:	90 e3       	ldi	r25, 0x30	; 48
 1c0:	21 50       	subi	r18, 0x01	; 1
 1c2:	80 40       	sbci	r24, 0x00	; 0
 1c4:	90 40       	sbci	r25, 0x00	; 0
 1c6:	e1 f7       	brne	.-8      	; 0x1c0 <main+0x32>
 1c8:	00 c0       	rjmp	.+0      	; 0x1ca <main+0x3c>
 1ca:	00 00       	nop
            _delay_ms(1000);
             //Back
            		OCR1A = speed75;  // Adjust the value as needed
 1cc:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <speed75>
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	a8 e8       	ldi	r26, 0x88	; 136
 1d4:	b0 e0       	ldi	r27, 0x00	; 0
 1d6:	11 96       	adiw	r26, 0x01	; 1
 1d8:	9c 93       	st	X, r25
 1da:	8e 93       	st	-X, r24
            		OCR1B = speed75;  // Adjust the value as needed
 1dc:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <speed75>
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	ea e8       	ldi	r30, 0x8A	; 138
 1e4:	f0 e0       	ldi	r31, 0x00	; 0
 1e6:	91 83       	std	Z+1, r25	; 0x01
 1e8:	80 83       	st	Z, r24
            PORTD |= (1 << PORTD0);
 1ea:	8b b1       	in	r24, 0x0b	; 11
 1ec:	81 60       	ori	r24, 0x01	; 1
 1ee:	8b b9       	out	0x0b, r24	; 11
            PORTD &= ~(1 << PORTD1);
 1f0:	8b b1       	in	r24, 0x0b	; 11
 1f2:	8d 7f       	andi	r24, 0xFD	; 253
 1f4:	8b b9       	out	0x0b, r24	; 11
            PORTD |= (1 << PORTD2);
 1f6:	8b b1       	in	r24, 0x0b	; 11
 1f8:	84 60       	ori	r24, 0x04	; 4
 1fa:	8b b9       	out	0x0b, r24	; 11
            PORTD &= ~(1 << PORTD3);
 1fc:	8b b1       	in	r24, 0x0b	; 11
 1fe:	87 7f       	andi	r24, 0xF7	; 247
 200:	8b b9       	out	0x0b, r24	; 11
 202:	2f ef       	ldi	r18, 0xFF	; 255
 204:	8d e3       	ldi	r24, 0x3D	; 61
 206:	99 e4       	ldi	r25, 0x49	; 73
 208:	21 50       	subi	r18, 0x01	; 1
 20a:	80 40       	sbci	r24, 0x00	; 0
 20c:	90 40       	sbci	r25, 0x00	; 0
 20e:	e1 f7       	brne	.-8      	; 0x208 <main+0x7a>
 210:	00 c0       	rjmp	.+0      	; 0x212 <main+0x84>
 212:	00 00       	nop
            _delay_ms(1500);
				OCR1A = speed100;  // Adjust the value as needed
 214:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	11 96       	adiw	r26, 0x01	; 1
 21c:	9c 93       	st	X, r25
 21e:	8e 93       	st	-X, r24
				OCR1B = speed100;  // Adjust the value as needed
 220:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	91 83       	std	Z+1, r25	; 0x01
 228:	80 83       	st	Z, r24
            //// Stop the car
           PORTD &= ~(1 << PORTD0);
 22a:	8b b1       	in	r24, 0x0b	; 11
 22c:	8e 7f       	andi	r24, 0xFE	; 254
 22e:	8b b9       	out	0x0b, r24	; 11
           PORTD &= ~(1 << PORTD1);
 230:	8b b1       	in	r24, 0x0b	; 11
 232:	8d 7f       	andi	r24, 0xFD	; 253
 234:	8b b9       	out	0x0b, r24	; 11
           PORTD &= ~(1 << PORTD2);
 236:	8b b1       	in	r24, 0x0b	; 11
 238:	8b 7f       	andi	r24, 0xFB	; 251
 23a:	8b b9       	out	0x0b, r24	; 11
           PORTD &= ~(1 << PORTD3);
 23c:	8b b1       	in	r24, 0x0b	; 11
 23e:	87 7f       	andi	r24, 0xF7	; 247
 240:	8b b9       	out	0x0b, r24	; 11
 242:	2f ef       	ldi	r18, 0xFF	; 255
 244:	8d e3       	ldi	r24, 0x3D	; 61
 246:	99 e4       	ldi	r25, 0x49	; 73
 248:	21 50       	subi	r18, 0x01	; 1
 24a:	80 40       	sbci	r24, 0x00	; 0
 24c:	90 40       	sbci	r25, 0x00	; 0
 24e:	e1 f7       	brne	.-8      	; 0x248 <main+0xba>
 250:	00 c0       	rjmp	.+0      	; 0x252 <main+0xc4>
 252:	00 00       	nop
            //// Left
           _delay_ms(1500);
		
            PORTD |= (1 << PORTD0);
 254:	8b b1       	in	r24, 0x0b	; 11
 256:	81 60       	ori	r24, 0x01	; 1
 258:	8b b9       	out	0x0b, r24	; 11
            PORTD &= ~(1 << PORTD1);
 25a:	8b b1       	in	r24, 0x0b	; 11
 25c:	8d 7f       	andi	r24, 0xFD	; 253
 25e:	8b b9       	out	0x0b, r24	; 11
            PORTD &= ~(1 << PORTD2);
 260:	8b b1       	in	r24, 0x0b	; 11
 262:	8b 7f       	andi	r24, 0xFB	; 251
 264:	8b b9       	out	0x0b, r24	; 11
            PORTD |= (1 << PORTD3);
 266:	8b b1       	in	r24, 0x0b	; 11
 268:	88 60       	ori	r24, 0x08	; 8
 26a:	8b b9       	out	0x0b, r24	; 11
 26c:	2f ef       	ldi	r18, 0xFF	; 255
 26e:	83 ed       	ldi	r24, 0xD3	; 211
 270:	90 e3       	ldi	r25, 0x30	; 48
 272:	21 50       	subi	r18, 0x01	; 1
 274:	80 40       	sbci	r24, 0x00	; 0
 276:	90 40       	sbci	r25, 0x00	; 0
 278:	e1 f7       	brne	.-8      	; 0x272 <main+0xe4>
 27a:	00 c0       	rjmp	.+0      	; 0x27c <main+0xee>
 27c:	00 00       	nop
			
            _delay_ms(1000);
			
            //// Stop the car
            PORTD &= ~(1 << PORTD0);
 27e:	8b b1       	in	r24, 0x0b	; 11
 280:	8e 7f       	andi	r24, 0xFE	; 254
 282:	8b b9       	out	0x0b, r24	; 11
            PORTD &= ~(1 << PORTD1);
 284:	8b b1       	in	r24, 0x0b	; 11
 286:	8d 7f       	andi	r24, 0xFD	; 253
 288:	8b b9       	out	0x0b, r24	; 11
            PORTD &= ~(1 << PORTD2);
 28a:	8b b1       	in	r24, 0x0b	; 11
 28c:	8b 7f       	andi	r24, 0xFB	; 251
 28e:	8b b9       	out	0x0b, r24	; 11
            PORTD &= ~(1 << PORTD3);
 290:	8b b1       	in	r24, 0x0b	; 11
 292:	87 7f       	andi	r24, 0xF7	; 247
 294:	8b b9       	out	0x0b, r24	; 11
 296:	2f ef       	ldi	r18, 0xFF	; 255
 298:	83 ed       	ldi	r24, 0xD3	; 211
 29a:	90 e3       	ldi	r25, 0x30	; 48
 29c:	21 50       	subi	r18, 0x01	; 1
 29e:	80 40       	sbci	r24, 0x00	; 0
 2a0:	90 40       	sbci	r25, 0x00	; 0
 2a2:	e1 f7       	brne	.-8      	; 0x29c <main+0x10e>
 2a4:	00 c0       	rjmp	.+0      	; 0x2a6 <main+0x118>
 2a6:	00 00       	nop
 2a8:	74 cf       	rjmp	.-280    	; 0x192 <main+0x4>
            _delay_ms(1000);
            
        } else {
            // Move the car forward
            PORTD&=~(1<<PORTD7);
 2aa:	8b b1       	in	r24, 0x0b	; 11
 2ac:	8f 77       	andi	r24, 0x7F	; 127
 2ae:	8b b9       	out	0x0b, r24	; 11
            PORTD &= ~(1 << PORTD0);
 2b0:	8b b1       	in	r24, 0x0b	; 11
 2b2:	8e 7f       	andi	r24, 0xFE	; 254
 2b4:	8b b9       	out	0x0b, r24	; 11
            PORTD |= (1 << PORTD1);
 2b6:	8b b1       	in	r24, 0x0b	; 11
 2b8:	82 60       	ori	r24, 0x02	; 2
 2ba:	8b b9       	out	0x0b, r24	; 11
            PORTD &= ~(1 << PORTD2);
 2bc:	8b b1       	in	r24, 0x0b	; 11
 2be:	8b 7f       	andi	r24, 0xFB	; 251
 2c0:	8b b9       	out	0x0b, r24	; 11
            PORTD |= (1 << PORTD3);
 2c2:	8b b1       	in	r24, 0x0b	; 11
 2c4:	88 60       	ori	r24, 0x08	; 8
 2c6:	8b b9       	out	0x0b, r24	; 11
 2c8:	64 cf       	rjmp	.-312    	; 0x192 <main+0x4>

000002ca <__fixsfsi>:
 2ca:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <__fixunssfsi>
 2ce:	68 94       	set
 2d0:	b1 11       	cpse	r27, r1
 2d2:	0c 94 fb 01 	jmp	0x3f6	; 0x3f6 <__fp_szero>
 2d6:	08 95       	ret

000002d8 <__fixunssfsi>:
 2d8:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <__fp_splitA>
 2dc:	88 f0       	brcs	.+34     	; 0x300 <__fixunssfsi+0x28>
 2de:	9f 57       	subi	r25, 0x7F	; 127
 2e0:	98 f0       	brcs	.+38     	; 0x308 <__fixunssfsi+0x30>
 2e2:	b9 2f       	mov	r27, r25
 2e4:	99 27       	eor	r25, r25
 2e6:	b7 51       	subi	r27, 0x17	; 23
 2e8:	b0 f0       	brcs	.+44     	; 0x316 <__fixunssfsi+0x3e>
 2ea:	e1 f0       	breq	.+56     	; 0x324 <__fixunssfsi+0x4c>
 2ec:	66 0f       	add	r22, r22
 2ee:	77 1f       	adc	r23, r23
 2f0:	88 1f       	adc	r24, r24
 2f2:	99 1f       	adc	r25, r25
 2f4:	1a f0       	brmi	.+6      	; 0x2fc <__fixunssfsi+0x24>
 2f6:	ba 95       	dec	r27
 2f8:	c9 f7       	brne	.-14     	; 0x2ec <__fixunssfsi+0x14>
 2fa:	14 c0       	rjmp	.+40     	; 0x324 <__fixunssfsi+0x4c>
 2fc:	b1 30       	cpi	r27, 0x01	; 1
 2fe:	91 f0       	breq	.+36     	; 0x324 <__fixunssfsi+0x4c>
 300:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <__fp_zero>
 304:	b1 e0       	ldi	r27, 0x01	; 1
 306:	08 95       	ret
 308:	0c 94 fa 01 	jmp	0x3f4	; 0x3f4 <__fp_zero>
 30c:	67 2f       	mov	r22, r23
 30e:	78 2f       	mov	r23, r24
 310:	88 27       	eor	r24, r24
 312:	b8 5f       	subi	r27, 0xF8	; 248
 314:	39 f0       	breq	.+14     	; 0x324 <__fixunssfsi+0x4c>
 316:	b9 3f       	cpi	r27, 0xF9	; 249
 318:	cc f3       	brlt	.-14     	; 0x30c <__fixunssfsi+0x34>
 31a:	86 95       	lsr	r24
 31c:	77 95       	ror	r23
 31e:	67 95       	ror	r22
 320:	b3 95       	inc	r27
 322:	d9 f7       	brne	.-10     	; 0x31a <__fixunssfsi+0x42>
 324:	3e f4       	brtc	.+14     	; 0x334 <__fixunssfsi+0x5c>
 326:	90 95       	com	r25
 328:	80 95       	com	r24
 32a:	70 95       	com	r23
 32c:	61 95       	neg	r22
 32e:	7f 4f       	sbci	r23, 0xFF	; 255
 330:	8f 4f       	sbci	r24, 0xFF	; 255
 332:	9f 4f       	sbci	r25, 0xFF	; 255
 334:	08 95       	ret

00000336 <__floatunsisf>:
 336:	e8 94       	clt
 338:	09 c0       	rjmp	.+18     	; 0x34c <__floatsisf+0x12>

0000033a <__floatsisf>:
 33a:	97 fb       	bst	r25, 7
 33c:	3e f4       	brtc	.+14     	; 0x34c <__floatsisf+0x12>
 33e:	90 95       	com	r25
 340:	80 95       	com	r24
 342:	70 95       	com	r23
 344:	61 95       	neg	r22
 346:	7f 4f       	sbci	r23, 0xFF	; 255
 348:	8f 4f       	sbci	r24, 0xFF	; 255
 34a:	9f 4f       	sbci	r25, 0xFF	; 255
 34c:	99 23       	and	r25, r25
 34e:	a9 f0       	breq	.+42     	; 0x37a <__floatsisf+0x40>
 350:	f9 2f       	mov	r31, r25
 352:	96 e9       	ldi	r25, 0x96	; 150
 354:	bb 27       	eor	r27, r27
 356:	93 95       	inc	r25
 358:	f6 95       	lsr	r31
 35a:	87 95       	ror	r24
 35c:	77 95       	ror	r23
 35e:	67 95       	ror	r22
 360:	b7 95       	ror	r27
 362:	f1 11       	cpse	r31, r1
 364:	f8 cf       	rjmp	.-16     	; 0x356 <__floatsisf+0x1c>
 366:	fa f4       	brpl	.+62     	; 0x3a6 <__floatsisf+0x6c>
 368:	bb 0f       	add	r27, r27
 36a:	11 f4       	brne	.+4      	; 0x370 <__floatsisf+0x36>
 36c:	60 ff       	sbrs	r22, 0
 36e:	1b c0       	rjmp	.+54     	; 0x3a6 <__floatsisf+0x6c>
 370:	6f 5f       	subi	r22, 0xFF	; 255
 372:	7f 4f       	sbci	r23, 0xFF	; 255
 374:	8f 4f       	sbci	r24, 0xFF	; 255
 376:	9f 4f       	sbci	r25, 0xFF	; 255
 378:	16 c0       	rjmp	.+44     	; 0x3a6 <__floatsisf+0x6c>
 37a:	88 23       	and	r24, r24
 37c:	11 f0       	breq	.+4      	; 0x382 <__floatsisf+0x48>
 37e:	96 e9       	ldi	r25, 0x96	; 150
 380:	11 c0       	rjmp	.+34     	; 0x3a4 <__floatsisf+0x6a>
 382:	77 23       	and	r23, r23
 384:	21 f0       	breq	.+8      	; 0x38e <__floatsisf+0x54>
 386:	9e e8       	ldi	r25, 0x8E	; 142
 388:	87 2f       	mov	r24, r23
 38a:	76 2f       	mov	r23, r22
 38c:	05 c0       	rjmp	.+10     	; 0x398 <__floatsisf+0x5e>
 38e:	66 23       	and	r22, r22
 390:	71 f0       	breq	.+28     	; 0x3ae <__floatsisf+0x74>
 392:	96 e8       	ldi	r25, 0x86	; 134
 394:	86 2f       	mov	r24, r22
 396:	70 e0       	ldi	r23, 0x00	; 0
 398:	60 e0       	ldi	r22, 0x00	; 0
 39a:	2a f0       	brmi	.+10     	; 0x3a6 <__floatsisf+0x6c>
 39c:	9a 95       	dec	r25
 39e:	66 0f       	add	r22, r22
 3a0:	77 1f       	adc	r23, r23
 3a2:	88 1f       	adc	r24, r24
 3a4:	da f7       	brpl	.-10     	; 0x39c <__floatsisf+0x62>
 3a6:	88 0f       	add	r24, r24
 3a8:	96 95       	lsr	r25
 3aa:	87 95       	ror	r24
 3ac:	97 f9       	bld	r25, 7
 3ae:	08 95       	ret

000003b0 <__fp_split3>:
 3b0:	57 fd       	sbrc	r21, 7
 3b2:	90 58       	subi	r25, 0x80	; 128
 3b4:	44 0f       	add	r20, r20
 3b6:	55 1f       	adc	r21, r21
 3b8:	59 f0       	breq	.+22     	; 0x3d0 <__fp_splitA+0x10>
 3ba:	5f 3f       	cpi	r21, 0xFF	; 255
 3bc:	71 f0       	breq	.+28     	; 0x3da <__fp_splitA+0x1a>
 3be:	47 95       	ror	r20

000003c0 <__fp_splitA>:
 3c0:	88 0f       	add	r24, r24
 3c2:	97 fb       	bst	r25, 7
 3c4:	99 1f       	adc	r25, r25
 3c6:	61 f0       	breq	.+24     	; 0x3e0 <__fp_splitA+0x20>
 3c8:	9f 3f       	cpi	r25, 0xFF	; 255
 3ca:	79 f0       	breq	.+30     	; 0x3ea <__fp_splitA+0x2a>
 3cc:	87 95       	ror	r24
 3ce:	08 95       	ret
 3d0:	12 16       	cp	r1, r18
 3d2:	13 06       	cpc	r1, r19
 3d4:	14 06       	cpc	r1, r20
 3d6:	55 1f       	adc	r21, r21
 3d8:	f2 cf       	rjmp	.-28     	; 0x3be <__fp_split3+0xe>
 3da:	46 95       	lsr	r20
 3dc:	f1 df       	rcall	.-30     	; 0x3c0 <__fp_splitA>
 3de:	08 c0       	rjmp	.+16     	; 0x3f0 <__fp_splitA+0x30>
 3e0:	16 16       	cp	r1, r22
 3e2:	17 06       	cpc	r1, r23
 3e4:	18 06       	cpc	r1, r24
 3e6:	99 1f       	adc	r25, r25
 3e8:	f1 cf       	rjmp	.-30     	; 0x3cc <__fp_splitA+0xc>
 3ea:	86 95       	lsr	r24
 3ec:	71 05       	cpc	r23, r1
 3ee:	61 05       	cpc	r22, r1
 3f0:	08 94       	sec
 3f2:	08 95       	ret

000003f4 <__fp_zero>:
 3f4:	e8 94       	clt

000003f6 <__fp_szero>:
 3f6:	bb 27       	eor	r27, r27
 3f8:	66 27       	eor	r22, r22
 3fa:	77 27       	eor	r23, r23
 3fc:	cb 01       	movw	r24, r22
 3fe:	97 f9       	bld	r25, 7
 400:	08 95       	ret

00000402 <__mulsf3>:
 402:	0e 94 14 02 	call	0x428	; 0x428 <__mulsf3x>
 406:	0c 94 85 02 	jmp	0x50a	; 0x50a <__fp_round>
 40a:	0e 94 77 02 	call	0x4ee	; 0x4ee <__fp_pscA>
 40e:	38 f0       	brcs	.+14     	; 0x41e <__mulsf3+0x1c>
 410:	0e 94 7e 02 	call	0x4fc	; 0x4fc <__fp_pscB>
 414:	20 f0       	brcs	.+8      	; 0x41e <__mulsf3+0x1c>
 416:	95 23       	and	r25, r21
 418:	11 f0       	breq	.+4      	; 0x41e <__mulsf3+0x1c>
 41a:	0c 94 6e 02 	jmp	0x4dc	; 0x4dc <__fp_inf>
 41e:	0c 94 74 02 	jmp	0x4e8	; 0x4e8 <__fp_nan>
 422:	11 24       	eor	r1, r1
 424:	0c 94 fb 01 	jmp	0x3f6	; 0x3f6 <__fp_szero>

00000428 <__mulsf3x>:
 428:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <__fp_split3>
 42c:	70 f3       	brcs	.-36     	; 0x40a <__mulsf3+0x8>

0000042e <__mulsf3_pse>:
 42e:	95 9f       	mul	r25, r21
 430:	c1 f3       	breq	.-16     	; 0x422 <__mulsf3+0x20>
 432:	95 0f       	add	r25, r21
 434:	50 e0       	ldi	r21, 0x00	; 0
 436:	55 1f       	adc	r21, r21
 438:	62 9f       	mul	r22, r18
 43a:	f0 01       	movw	r30, r0
 43c:	72 9f       	mul	r23, r18
 43e:	bb 27       	eor	r27, r27
 440:	f0 0d       	add	r31, r0
 442:	b1 1d       	adc	r27, r1
 444:	63 9f       	mul	r22, r19
 446:	aa 27       	eor	r26, r26
 448:	f0 0d       	add	r31, r0
 44a:	b1 1d       	adc	r27, r1
 44c:	aa 1f       	adc	r26, r26
 44e:	64 9f       	mul	r22, r20
 450:	66 27       	eor	r22, r22
 452:	b0 0d       	add	r27, r0
 454:	a1 1d       	adc	r26, r1
 456:	66 1f       	adc	r22, r22
 458:	82 9f       	mul	r24, r18
 45a:	22 27       	eor	r18, r18
 45c:	b0 0d       	add	r27, r0
 45e:	a1 1d       	adc	r26, r1
 460:	62 1f       	adc	r22, r18
 462:	73 9f       	mul	r23, r19
 464:	b0 0d       	add	r27, r0
 466:	a1 1d       	adc	r26, r1
 468:	62 1f       	adc	r22, r18
 46a:	83 9f       	mul	r24, r19
 46c:	a0 0d       	add	r26, r0
 46e:	61 1d       	adc	r22, r1
 470:	22 1f       	adc	r18, r18
 472:	74 9f       	mul	r23, r20
 474:	33 27       	eor	r19, r19
 476:	a0 0d       	add	r26, r0
 478:	61 1d       	adc	r22, r1
 47a:	23 1f       	adc	r18, r19
 47c:	84 9f       	mul	r24, r20
 47e:	60 0d       	add	r22, r0
 480:	21 1d       	adc	r18, r1
 482:	82 2f       	mov	r24, r18
 484:	76 2f       	mov	r23, r22
 486:	6a 2f       	mov	r22, r26
 488:	11 24       	eor	r1, r1
 48a:	9f 57       	subi	r25, 0x7F	; 127
 48c:	50 40       	sbci	r21, 0x00	; 0
 48e:	9a f0       	brmi	.+38     	; 0x4b6 <__mulsf3_pse+0x88>
 490:	f1 f0       	breq	.+60     	; 0x4ce <__mulsf3_pse+0xa0>
 492:	88 23       	and	r24, r24
 494:	4a f0       	brmi	.+18     	; 0x4a8 <__mulsf3_pse+0x7a>
 496:	ee 0f       	add	r30, r30
 498:	ff 1f       	adc	r31, r31
 49a:	bb 1f       	adc	r27, r27
 49c:	66 1f       	adc	r22, r22
 49e:	77 1f       	adc	r23, r23
 4a0:	88 1f       	adc	r24, r24
 4a2:	91 50       	subi	r25, 0x01	; 1
 4a4:	50 40       	sbci	r21, 0x00	; 0
 4a6:	a9 f7       	brne	.-22     	; 0x492 <__mulsf3_pse+0x64>
 4a8:	9e 3f       	cpi	r25, 0xFE	; 254
 4aa:	51 05       	cpc	r21, r1
 4ac:	80 f0       	brcs	.+32     	; 0x4ce <__mulsf3_pse+0xa0>
 4ae:	0c 94 6e 02 	jmp	0x4dc	; 0x4dc <__fp_inf>
 4b2:	0c 94 fb 01 	jmp	0x3f6	; 0x3f6 <__fp_szero>
 4b6:	5f 3f       	cpi	r21, 0xFF	; 255
 4b8:	e4 f3       	brlt	.-8      	; 0x4b2 <__mulsf3_pse+0x84>
 4ba:	98 3e       	cpi	r25, 0xE8	; 232
 4bc:	d4 f3       	brlt	.-12     	; 0x4b2 <__mulsf3_pse+0x84>
 4be:	86 95       	lsr	r24
 4c0:	77 95       	ror	r23
 4c2:	67 95       	ror	r22
 4c4:	b7 95       	ror	r27
 4c6:	f7 95       	ror	r31
 4c8:	e7 95       	ror	r30
 4ca:	9f 5f       	subi	r25, 0xFF	; 255
 4cc:	c1 f7       	brne	.-16     	; 0x4be <__mulsf3_pse+0x90>
 4ce:	fe 2b       	or	r31, r30
 4d0:	88 0f       	add	r24, r24
 4d2:	91 1d       	adc	r25, r1
 4d4:	96 95       	lsr	r25
 4d6:	87 95       	ror	r24
 4d8:	97 f9       	bld	r25, 7
 4da:	08 95       	ret

000004dc <__fp_inf>:
 4dc:	97 f9       	bld	r25, 7
 4de:	9f 67       	ori	r25, 0x7F	; 127
 4e0:	80 e8       	ldi	r24, 0x80	; 128
 4e2:	70 e0       	ldi	r23, 0x00	; 0
 4e4:	60 e0       	ldi	r22, 0x00	; 0
 4e6:	08 95       	ret

000004e8 <__fp_nan>:
 4e8:	9f ef       	ldi	r25, 0xFF	; 255
 4ea:	80 ec       	ldi	r24, 0xC0	; 192
 4ec:	08 95       	ret

000004ee <__fp_pscA>:
 4ee:	00 24       	eor	r0, r0
 4f0:	0a 94       	dec	r0
 4f2:	16 16       	cp	r1, r22
 4f4:	17 06       	cpc	r1, r23
 4f6:	18 06       	cpc	r1, r24
 4f8:	09 06       	cpc	r0, r25
 4fa:	08 95       	ret

000004fc <__fp_pscB>:
 4fc:	00 24       	eor	r0, r0
 4fe:	0a 94       	dec	r0
 500:	12 16       	cp	r1, r18
 502:	13 06       	cpc	r1, r19
 504:	14 06       	cpc	r1, r20
 506:	05 06       	cpc	r0, r21
 508:	08 95       	ret

0000050a <__fp_round>:
 50a:	09 2e       	mov	r0, r25
 50c:	03 94       	inc	r0
 50e:	00 0c       	add	r0, r0
 510:	11 f4       	brne	.+4      	; 0x516 <__fp_round+0xc>
 512:	88 23       	and	r24, r24
 514:	52 f0       	brmi	.+20     	; 0x52a <__fp_round+0x20>
 516:	bb 0f       	add	r27, r27
 518:	40 f4       	brcc	.+16     	; 0x52a <__fp_round+0x20>
 51a:	bf 2b       	or	r27, r31
 51c:	11 f4       	brne	.+4      	; 0x522 <__fp_round+0x18>
 51e:	60 ff       	sbrs	r22, 0
 520:	04 c0       	rjmp	.+8      	; 0x52a <__fp_round+0x20>
 522:	6f 5f       	subi	r22, 0xFF	; 255
 524:	7f 4f       	sbci	r23, 0xFF	; 255
 526:	8f 4f       	sbci	r24, 0xFF	; 255
 528:	9f 4f       	sbci	r25, 0xFF	; 255
 52a:	08 95       	ret

0000052c <_exit>:
 52c:	f8 94       	cli

0000052e <__stop_program>:
 52e:	ff cf       	rjmp	.-2      	; 0x52e <__stop_program>
